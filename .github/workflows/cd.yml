name: CD

permissions:
  contents: write

on:
  push:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  ci:
    uses: ./.github/workflows/ci.yml

  semantic_release:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN}}
    needs: [ci]

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo bin
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
          key: ${{ runner.os }}-cargo-bin

      - name: Install Cargo Edit
        run: |
          if ! command -v cargo-set-version &> /dev/null; then
            cargo install cargo-edit
          fi

      - name: Run Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/changelog"
            @semantic-release/github
            @semantic-release/exec
            @semantic-release/git
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  build-release:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [semantic_release]
    if: needs.semantic_release.outputs.release_tag != ''
    env:
      APP_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      RELEASE_TAG: ${{ needs.semantic_release.outputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross_arch: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout source
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross_arch }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          case ${{ matrix.target }} in
          *-pc-windows-*)
            7z -y a $APP_NAME-${{ matrix.target }}.zip $APP_NAME.exe
            sha256sum $APP_NAME-${{ matrix.target }}.zip > $APP_NAME-${{ matrix.target }}.sha256
            ;;
          *)
            tar czvf $APP_NAME-${{ matrix.target }}.tar.gz $APP_NAME
            shasum -a 256 $APP_NAME-${{ matrix.target }}.tar.gz > $APP_NAME-${{ matrix.target }}.sha256
            ;;
          esac;

      - name: Upload assets to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: target/${{ matrix.target }}/release/${{ env.APP_NAME }}-${{ matrix.target }}*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
